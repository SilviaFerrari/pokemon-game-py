import pygame
from pygame.locals import *
from sys import exit
pygame.init()
hs = 950
ls = 1450
screen = pygame.display.set_mode((ls,hs))
pygame.display.set_caption("JumpHell")
clock=pygame.time.Clock()
white = (225,225,225)
red = (225,0,0)
black = (0,0,0)
"""Creiamo i 2 principali gruppi di sprites: le sprites da disegnare in generale
e le piattaforme, in un gruppo separato per poter usare le funzioni di collisione"""
todraw=pygame.sprite.Group()
plats=pygame.sprite.Group()
#Classe per la creazione delle piattaforme
giocatore = pygame.image.load("E:\GIOCO_PYTHON\Immagini\smb3.png")
terreno = pygame.image.load("E:\GIOCO_PYTHON\Immagini\lava.jpg")
ostacolo = pygame.image.load("E:\GIOCO_PYTHON\Immagini\ostacolo_inferno.png")
ostacolo_l = pygame.image.load("E:\GIOCO_PYTHON\Immagini\ostacolo_inferno_L.png")
ostacolo_r = pygame.image.load("E:\GIOCO_PYTHON\Immagini\ostacolo_inferno_R.png")
ostacolo_u = pygame.image.load("E:\GIOCO_PYTHON\Immagini\ostacolo_inferno_U.png")
class Platform(pygame.sprite.Sprite):
    def __init__(self,x,y):
        pygame.sprite.Sprite.__init__(self)
        self.image = terreno
        self.image.set_colorkey(red)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        plats.add(self)
    def update(self):
        screen.blit(self.image, (self.rect.x, self.rect.y))

class Obstacle(pygame.sprite.Sprite):
    def __init__(self,x,y,image):
        pygame.sprite.Sprite.__init__(self)
        self.image = image
        self.image.set_colorkey(black)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        plats.add(self)
    def update(self):
        screen.blit(self.image, (self.rect.x, self.rect.y))

class Player(pygame.sprite.Sprite):
    move_x = 0
    move_y = 0
    onground=False
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = giocatore
        #self.image = pygame.Surface((50,50))
        #player = self.image.fill((225,225,225))
        self.image.set_colorkey(black)
        self.rect = self.image.get_rect()
        self.rect.x = 700
        self.rect.y = 370
        todraw.add(self)
    def update(self):
        self.rect.x += self.move_x
        xcoll()
        self.rect.y += self.move_y
        ycoll()
        screen.blit(self.image,(self.rect.x, self.rect.y))
""" Le collisioni vengono calcolate separatamente sull'asse x ed y
altrimenti il nostro personaggio sembrerÃ  teletrasportarsi"""
def xcoll():
    collision=pygame.sprite.spritecollide(player, plats, False)
    for block in collision:
        if player.move_x>0:
            player.rect.right=block.rect.left
        if player.move_x<0:
            player.rect.left=block.rect.right
def ycoll():
        collision=pygame.sprite.spritecollide(player, plats, False)
        player.onground=False
        for block in collision:
            if player.move_y==0:
                player.onground=True
            if player.move_y<0:
                player.rect.top=block.rect.bottom
                player.move_y=0     #serve per evitare l'impressione che il giocatore si "appiccichi" al soffitto
                player.onground=False
            if player.move_y>0:
                player.rect.bottom=block.rect.top
                player.onground=True


"""*def game_intro():
    intro = True
    while intro:
        #pygame.mixer.music.load("E:\GIOCO_PYTHON\pikachu.mp3")
        #pygame.mixer.music.play(0)
        sdg.fill(white)
        draw_image(menu,0,0)
        draw_image(pikachu,450,240)
        drawtext(title,200,40)
        drawtext(textuse,200,150)
        drawtext(textmenu,225,575)
        pygame.display.update()
        clock.tick(FPS)
                
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_m:
                    intro = False


while not gameExit:
        
        while gameOver == True:
            textscore = mediumfont.render("Hai catturato " + str_score + " pokemon", False, (225,0,0))
            
            sdg.fill(white)
            draw_image(menu,0,0)
            drawtext(textover,250,50)
            draw_image(poke_open,190,250)
            drawtext(textscore,415,310)
            drawtext(textuse3,250,510)
            drawtext(textexit,270,580)
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    gameOver = False
                    gameExit = True
                    
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_e:
                        gameExit = True
                        gameOver = False
                    if event.key == pygame.K_r:
                        game_loop()
                
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                gameExit = True*"""
                    





                
"""Una semplice routine per costruire il livello, ogni "#" corrisponde
ad un blocco 50x50 pixel di terreno"""
platform = []
def build():
    px = 0
    py = 0
    myx = 0
    myy = 0
    obx = 0
    oby = 0
    ubx = 0
    uby = 0
    rbx = 0
    rby = 0
    lbx = 0
    lby = 0
    level = ['#############################',
            '#uu          ################',
            '#            uuuuu###########',
            '#    ooooo              #####',
            '#   l#####r             uuuu#',
            '#    uuuu#r                 #',
            '#        #######oooooo      #',
            '#o       #     #######      #',
            '########### ####### ######  #',
            '#uuuuuuu       #r        #  #',
            '#              #r        #  #',
            '#          o   ###oo  o  #  #',
            '#  # # # #######u###  #  #  #',
            '#  #########  u    #     #  #',
            '#  #       #       u     #  #',
            '#  #       #             #  #',
            '#     oo   #    #     #  #  #',
            '#     ##      #o#  o  #     #',
            '#############################']
    for i in level:
        for c in i:
            if c == ' ':
                pass
            elif c == '#':
                p = Platform(myx,myy)
            myx += 50
        myy += 50
        myx = 0
        for c in i:
            if c == 'u':
                Obstacle(ubx,uby,ostacolo_u)
            ubx += 50
        uby += 50
        ubx = 0
        for c in i:
            if c == 'o':
                Obstacle(obx,oby,ostacolo)
            obx += 50
        oby += 50
        obx = 0
        for c in i:
            if c == 'l':
                Obstacle(lbx,lby,ostacolo_l)
            lbx += 50
        lby += 50
        lbx = 0
        for c in i:
            if c == 'r':
                Obstacle(rbx,rby,ostacolo_r)
            rbx += 50
        rby += 50
        rbx = 0
        """for c in i:
             if c == 'X':
                 Player(px,py)
             px += 50
        py += 50
        px = 0"""
                
def gravity():
    if not player.onground:
        player.move_y+=0.8
player = Player()
build()

while True:
    screen.fill((0,0,0))
    gravity()
   
    for event in pygame.event.get():
        if event.type == QUIT:  
            pygame.quit()
            quit()
        if event.type == KEYDOWN:
            if event.key == K_SPACE:   
                player.move_y =- 10
            if event.key == K_LEFT: 
                player.move_x =- 10
            if event.key == K_RIGHT:   
                player.move_x = 10
        if event.type == KEYUP:  
            if event.key == K_LEFT:
                player.move_x = 0
            if event.key == K_RIGHT:
                player.move_x = 0
    
    todraw.update()
    plats.update()
    pygame.display.update()
    clock.tick(30)
pygame.quit()
quit()
