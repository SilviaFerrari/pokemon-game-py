import pygame
from pygame.locals import *
from sys import exit
pygame.init()
hs = 950
ls = 1450
screen = pygame.display.set_mode((ls,hs))
pygame.display.set_caption("JumpHell")
clock=pygame.time.Clock()
white = (225,225,225)
red = (225,0,0)
black = (0,0,0)
silver = (192,192,192)
"""Creiamo i 2 principali gruppi di sprites: le sprites da disegnare in generale
e le piattaforme, in un gruppo separato per poter usare le funzioni di collisione"""
todraw=pygame.sprite.Group()
plats=pygame.sprite.Group()

#Funzione per creare vari tipi di testo e immagini
smallfont = pygame.font.SysFont("Arial",30)
mediumfont = pygame.font.SysFont("Agency FB",50)
largefont = pygame.font.SysFont("Agency FB",130)

def drawtext(name,text_x,text_y):
    screen.blit(name,(text_x,text_y))

title = largefont.render("SKY HOP", False, (0,255,225))
space = mediumfont.render("Press space to jump", False, black)
arrows = mediumfont.render("Use the arrows to go right or left", False, black)
start = mediumfont.render("Press S to start", False, black)

def drawimage(image,x,y):
    screen.blit(image,(x,y))
    
#Importo delle immagini
sfondo = pygame.image.load("asdf.png")
giocatore = pygame.image.load("E:\GIOCO_PYTHON\Immagini\smb3.png")
terreno = pygame.image.load("E:\GIOCO_PYTHON\Immagini\ipologie_terreno2.jpg")
ostacolo = pygame.image.load("E:\GIOCO_PYTHON\Immagini\ostacolo_inferno.png")
ostacolo_l = pygame.image.load("E:\GIOCO_PYTHON\Immagini\ostacolo_inferno_L.png")
ostacolo_r = pygame.image.load("E:\GIOCO_PYTHON\Immagini\ostacolo_inferno_R.png")
ostacolo_u = pygame.image.load("E:\GIOCO_PYTHON\Immagini\ostacolo_inferno_U.png")
goal_inf = pygame.image.load("E:\GIOCO_PYTHON\Immagini\perg.png")
gameover = pygame.image.load("E:\GIOCO_PYTHON\Immagini\smbl.png")

#Classe per la creazione delle piattaforme
class Platform(pygame.sprite.Sprite):
    def __init__(self,x,y):
        pygame.sprite.Sprite.__init__(self)
        self.image = terreno
        self.image.set_colorkey(red)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        plats.add(self)
        global lose
        lose = "ok"
    def update(self):
        screen.blit(self.image, (self.rect.x, self.rect.y))

class Obstacle(pygame.sprite.Sprite):
    def __init__(self,x,y,image):
        pygame.sprite.Sprite.__init__(self)
        self.image = image
        self.image.set_colorkey(black)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        plats.add(self)
        global lose
        lose = "notok"
    def update(self):
        screen.blit(self.image, (self.rect.x, self.rect.y))

class Goal(pygame.sprite.Sprite):
    def __init__(self,x,y,image):
        pygame.sprite.Sprite.__init__(self)
        self.image = image
        self.image.set_colorkey(black)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        plats.add(self)
        global lose
        lose = "ok"
    def update(self):
        screen.blit(self.image, (self.rect.x, self.rect.y))
        
class Player(pygame.sprite.Sprite):
    move_x = 0
    move_y = 0
    onground=False
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = giocatore
        #self.image = pygame.Surface((50,50))
        #player = self.image.fill((225,225,225))
        self.image.set_colorkey(black)
        self.rect = self.image.get_rect()
        self.rect.x = 700
        self.rect.y = 370
        todraw.add(self)
    def update(self):
        self.rect.x += self.move_x
        xcoll()
        self.rect.y += self.move_y
        ycoll()
        screen.blit(self.image,(self.rect.x, self.rect.y))
    
"""Le collisioni vengono calcolate separatamente sull'asse x ed y
altrimenti il nostro personaggio sembrerÃ  teletrasportarsi"""
def xcoll():
    collision = pygame.sprite.spritecollide(player, plats, False)
    for block in collision:
        if player.move_x > 0:
            player.rect.right = block.rect.left
        if player.move_x < 0:
            player.rect.left = block.rect.right
    if lose == "notok":
        gameOver = True
def ycoll():
        collision=pygame.sprite.spritecollide(player, plats, False)
        player.onground=False
        for block in collision:
            if player.move_y==0:
                player.onground=True
            if player.move_y<0:
                player.rect.top=block.rect.bottom
                player.move_y=0                         #serve per evitare l'impressione che il giocatore si "appiccichi" al soffitto
                player.onground=False
            if player.move_y>0:
                player.rect.bottom=block.rect.top
                player.onground=True
        if lose == "notok":
            gameOver = True


def game_intro():
    intro = True
    while intro:
        #pygame.mixer.music.load("E:\GIOCO_PYTHON\pikachu.mp3")
        #pygame.mixer.music.play(0)
        screen.fill(silver)
        drawimage(sfondo,300,0)
        drawtext(title,530,300)
        drawtext(space,550,600)
        drawtext(arrows,470,660)
        drawtext(start,600,800)
        pygame.display.update()
        clock.tick(30)
                
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_s:
                    intro = False

"""def game_options():
    options = True
    while options:
        screen.fill(silver)
        drawtext(option)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygameK_s:
                    options = False"""





                
"""Una semplice routine per costruire il livello, ogni "#" corrisponde
ad un blocco 50x50 pixel di terreno"""
platform = []
def build():
    px = 0
    py = 0
    gx = 0
    gy = 0
    myx = 0
    myy = 0
    obx = 0
    oby = 0
    ubx = 0
    uby = 0
    rbx = 0
    rby = 0
    lbx = 0
    lby = 0
    level = ['#############################',
            '#uu          ################',
            '#            uuuuu###########',
            '#    ooooo              #####',
            '#   l#####r             uuuu#',
            '#    uuuu#r                 #',
            '#        #######oooooo      #',
            '#o      x#     #######      #',
            '########### ####### ######  #',
            '#uuuuuuu       #r       u#  #',
            '#              #r        #  #',
            '#          o   ###oo  o  #  #',
            '#  # # # #######u###  #  #  #',
            '#  #########  u    #  #  #  #',
            '#  #       #       u  #  #  #',
            '#  #       #          #  #  #',
            '#     oo   #    #     #  #  #',
            '#     ##      #o#  o  #     #',
            '#############################']
    for i in level:
        for c in i:
            if c == ' ':
                pass
            elif c == '#':
                p = Platform(myx,myy)
            myx += 50
        myy += 50
        myx = 0
        for c in i:
            if c == 'u':
                Obstacle(ubx,uby,ostacolo_u)
            ubx += 50
        uby += 50
        ubx = 0
        for c in i:
            if c == 'o':
                Obstacle(obx,oby,ostacolo)
            obx += 50
        oby += 50
        obx = 0
        for c in i:
            if c == 'l':
                Obstacle(lbx,lby,ostacolo_l)
            lbx += 50
        lby += 50
        lbx = 0
        for c in i:
            if c == 'r':
                Obstacle(rbx,rby,ostacolo_r)
            rbx += 50
        rby += 50
        rbx = 0
        for c in i:
             if c == 'x':
                 Goal(gx,gy,goal_inf)
             gx += 50
        gy += 50
        gx = 0
        
                
def gravity():
    if not player.onground:
        player.move_y+=0.8
        
player = Player()
build()

def game_loop():
    while True:
        gameExit = False
        gameOver = False
        screen.fill((0,0,0))
        gravity()

        while not gameExit:
        
            while gameOver == True:
                sdg.fill(black)
                drawimage(gameover,500,500)
                pygame.display.update()

                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        gameOver = False
                        gameExit = True
                        pygame.quit()
                        quit()
                        
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_r:
                            game_loop()
                
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
           
            if event.type == KEYDOWN:
                if event.key == K_SPACE:   
                    player.move_y =- 10
                if event.key == K_LEFT: 
                    player.move_x =- 10
                if event.key == K_RIGHT:   
                    player.move_x = 10
            if event.type == KEYUP:  
                if event.key == K_LEFT:
                    player.move_x = 0
                if event.key == K_RIGHT:
                    player.move_x = 0
        
        todraw.update()
        plats.update()
        pygame.display.update()
        clock.tick(30)
game_intro()
game_loop()
pygame.quit()
quit()

